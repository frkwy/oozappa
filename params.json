{"name":"Oozappa","tagline":"Fabric task runner and helper. Execute tasks via web browser.","body":"oozappa is 大雑把.\r\n\r\ninstall\r\n=======\r\n\r\n    $ git clone https://github.com/tsuyukimakoto/oozappa.git oozappa\r\n    $ cd oozappa\r\n    $ ln -s `pwd`/oozappa VIRTUALENV/lib/Python2.7/site-packages/oozappa\r\n    $ pip install -r requirements.txt\r\n\r\nor install from Cheese Shop (pypi).\r\n\r\n    $ pip install oozappa\r\n\r\nIf you use Xcode 5.1(above) and failed with __clang: error: unknown argument: '-mno-fused-madd'__, export flags before install pycrypt (before pip install -r requirements.txt).\r\n\r\n    $ export CPPFLAGS=-Qunused-arguments\r\n    $ export CFLAGS=-Qunused-arguments\r\n\r\noozappa data models.\r\n=======\r\n\r\n## Environment\r\n\r\nEnvironment is a category that has fibfile directory and vars.py .\r\n\r\nA problem about fabric with large project is, too many fabric tasks and complicated task orders.\r\n\r\nSo you should separate fabfile into domain category. That is Environment.\r\n\r\n## Job\r\n\r\nJob is like a normal fabric execution command.\r\n\r\n _eg. fab task1 task2 is a job._\r\n\r\n## Jobset\r\n\r\nJobset is oozappa operation unit.\r\n\r\nJobset can contain multiple job, even extend over environments. \r\n\r\noozappa fabric structures.\r\n=======\r\n\r\nsee sample oozappa project(sample/ops).\r\n\r\n    .\r\n    ├── common\r\n    │   ├── __init__.py\r\n    │   ├── files\r\n    │   ├── functions\r\n    │   │   ├── common_multiple_fabric_environment.py\r\n    │   ├── templates\r\n    │   │   └── sample_a.txt\r\n    │   └── vars.py\r\n    ├── construction\r\n    │   ├── fabfile\r\n    │   │   ├── __init__.py\r\n    │   ├── templates\r\n    │   └── vars.py\r\n    ├── deployment\r\n    │   ├── fabfile\r\n    │   │   ├── __init__.py\r\n    │   ├── templates\r\n    │   └── vars.py\r\n    ├── production\r\n    │   ├── fabfile\r\n    │   │   ├── __init__.py\r\n    │   ├── templates\r\n    │   └── vars.py\r\n    └── staging\r\n        ├── fabfile\r\n        │   ├── __init__.py\r\n        ├── templates\r\n        │   └── sample_a.txt\r\n        └── vars.py\r\n\r\n__common__ is reserved directory. __construction__ and others are environment directory. These names are just example.\r\n\r\n## vars\r\n\r\ncommon and each environment's vars.py might have oozappa.config.OozappaSetting instance named settings.\r\nOozappaSetting is dict like object.\r\ncommon.vars.setting is updated by executed environment's vars.setting, so you can set base configuration to common.vars.setting and environment's one overwrite it.\r\n\r\nCheck printsetting task on staging environment.\r\n\r\nYou can run fabric task within environment directory as usual.\r\n\r\n    $ cd sample/ops/staging\r\n    $ fab printsetting\r\n    {'instance_type': 't1.micro', 'domain': 'localhost', 'sample_template_vars': {'sample_a': {'key_a_2': \"a's 2 value from common.vars\", 'key_a_1': \"a's 1 value from stging.vars\"}}, 'email': 'mtsuyuki at gmail.com'}\r\n\r\nSee common/vars.py and staging/vars.py .\r\n\r\n## templates\r\n\r\nSame as vars, __oozappa.fabrictools.upload_template__ search template. upload_template is almost same as __fabric.contrib.files.upload_template__ . oozappa's upload_template doesn't accept use_jinja, because oozappa's upload_template pass use_jinja=True to fabric.contrib.files.upload_template.\r\n\r\nJinja2 has inheritance template system and search template from multipul paths. fabric's upload_template accept only one template_dir string not list. __fabric doesn't assume multiplu environment__, so it's reasonable.\r\nBecause of this, oozappa's upload_template search template path is limited only one template_dir that found filename.\r\nIt mean that you can't store child template and parent template separately.\r\n\r\n## common/functions\r\n\r\nCall __oozappa.config.procure_common_functions__() and add commons/functions directory to sys.path for convinient to using on multiple fabric environment.\r\n\r\nrun fabric task via web browser.\r\n=======\r\n\r\nChange directory to outside environment directory.\r\n\r\n    $ cd ..\r\n    $ ls\r\n    common\t\tproduction\tstaging\r\n    $ gunicorn -t 3600 -k flask_sockets.worker oozappa:app\r\n\r\nRunning oozappa:app creates __/tmp/oozappa.sqlite__ .\r\n\r\nOpen your web browser and browse http://localhost:8000/ .\r\n\r\n## rapid execution\r\n\r\nModify _Run fabric in raw_'s left hand side input to __staging__ and click _run_tasks_. You can see what tasks exists.\r\n\r\nThen input __ls ps__ to right hand side input and click _run_tasks_ .\r\n\r\nThat's it.\r\n\r\n## better way using sample\r\n\r\n### register environment to db.\r\n\r\n* Click environment button via top menu.\r\n* Add new Environment\r\n\t* name: constructiton \r\n\t* sort_order: 1\r\n\t* execute_path: constructiton\r\n* Add 3 more.\r\n\r\n![environments](https://dl.dropboxusercontent.com/u/382460/oozappa/readme/environments.png \"environments\")\r\n\r\n### create job in each environments.\r\n\r\n* Click environment you created\r\n* Create new Job.\r\n\t* Click task from Possible tasks in order\r\n\r\n![job](https://dl.dropboxusercontent.com/u/382460/oozappa/readme/create_job.png \"job\")\r\n\r\n### create jobset\r\n\r\n* Click jobset button via top menu.\r\n* Click jobs you'd like to execute once.\r\n\r\n![jobset](https://dl.dropboxusercontent.com/u/382460/oozappa/readme/create_jobset.png \"jobset\")\r\n\r\n### run jobset\r\n\r\n* Click navigation button or jobset button via top menu.\r\n* Click jobset you'd like to execute.\r\n* Click _run jobset_ button.\r\n* Running log displays __Running log__.\r\n* Reload page when jobset done. or Go to top(via navigation button)\r\n\t* You see Execute Logs and show raw log when you click success (or fail).\r\n\r\n![runnig jobset](https://dl.dropboxusercontent.com/u/382460/oozappa/readme/jobset.png \"running jobset\")\r\n\r\nHow to create your own\r\n=======\r\n\r\n## Create common directory\r\n\r\nChange directory your own oozappa.\r\n\r\n    $ mkdir devops\r\n    $ cd devops\r\n\r\nThen run oozappa.\r\n\r\n    $ python -m oozappa\r\n    Create common environment here? [y/N]y\r\n    create common directory. db file path and flask secret key are in common/vars.py.\r\n\r\n## change default settings\r\n\r\nOpen `common/vars.py` and change settings using temp directory. Or results disapear when you reboot your machine or server.\r\n\r\n* __OOZAPPA_DB__ : sqlite's data store path.\r\n* __OOZAPPA_LOG_BASEDIR__ : Jobset execute log store directory path.\r\n\r\n## create environment\r\n\r\nRun oozappa.create_environment with environment name(s).\r\n\r\n\t$ python -m oozappa.create_environment construction deployment\r\n\t2014-04-20 16:43:26,543 INFO create environment : construction\r\n\t2014-04-20 16:43:26,544 INFO create environment : deployment\r\n\r\nThen you can write fabfile normally and execute via oozappa.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}